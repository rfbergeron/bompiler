CC ?= gcc
CWARN = -Wall -Wextra -Werror -Wpedantic -Wshadow -Wno-declaration-after-statement
CFLAGS = -Ibadlib -Ibadlib/murmur3 -ansi -Og -pg -ggdb -fsanitize=address
MKFILE = Makefile
EXECNAME = bompiler
SRC = debug.c bcc_err.c attributes.c strset.c lyutils.c astree.c symtable.c typecheck.c asmgen.c state.c main.c
HDR = debug.h bcc_err.h attributes.h strset.h lyutils.h astree.h symtable.h typecheck.h asmgen.h state.h simplestack.h
OBJ = ${SRC:.c=.o}
# files generated by flex and bison
GENSRC = yyparse.c yylex.c
GENHDR = yyparse.h
GENOBJ = ${GENSRC:.c=.o}
# library files
LIBHDR = badlib/badmap.h badlib/badllist.h badlib/badalist.h
LIBOBJ = badmap.o badllist.o badalist.o murmur3.o
# convenient groups
ALLSRC = ${SRC} ${GENSRC}
ALLHDR = ${HDR} ${GENHDR} ${LIBHDR}
ALLOBJ = ${OBJ} ${GENOBJ} ${LIBOBJ}
# .gch header gens
GCH = ${ALLHDR:=.gch}

.PHONY: all badlib

# Target-specific variables
#sanitize: CFLAGS += ${SANITIZE}
#debug: CFLAGS += ${DEBUG}
#warn: CFLAGS += ${WARN}
#paranoid: CFLAGS += ${SANITIZE} ${WARN} ${DEBUG}

all: ${EXECNAME}

#sanitize: ${EXECNAME}

#warn: ${EXECNAME}

#debug: ${EXECNAME}

#paranoid: ${EXECNAME}

${EXECNAME}: ${ALLOBJ}
	${CC} ${CFLAGS} ${CWARN} -o $@ $^

badlib:
	git submodule update --init --recursive badlib

yylex.o: yylex.c
	${CC} ${CFLAGS} ${CWARN} -c $^

yyparse.o: yyparse.c yyparse.h
	${CC} ${CFLAGS} ${CWARN} -c $^

${LIBOBJ}&: badlib
	make -C badlib/ objects
	cp $(foreach file, ${LIBOBJ}, badlib/${file}) ./

${LIBHDR}: badlib

%.o: %.c ${ALLHDR}
	${CC} ${CFLAGS} ${CWARN} -c $^

yylex.c: scanner.l
	flex --outfile=yylex.c scanner.l

yyparse.h yyparse.c&: parser.y
	bison -Wall -v --defines=yyparse.h --output=yyparse.c parser.y

clean:
	make -C badlib/ clean
	rm -f ${ALLOBJ} ${GENSRC} ${GENHDR} ${GCH} yyparse.output

ci: 
	git add ${HDR} ${SRC} ${MKFILE} README.md DESIGN.md TODO.md DESIGN2.md \
	IDEAS.md .gitignore .gitmodules parser.y scanner.l

format:
	clang-format --style=Google -i ${SRC} ${HDR} parser.y
