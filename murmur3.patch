diff --git a/murmur3.c b/murmur3.c
index 68e0594..4dcb643 100644
--- a/murmur3.c
+++ b/murmur3.c
@@ -1,16 +1,21 @@
-//-----------------------------------------------------------------------------
-// MurmurHash3 was written by Austin Appleby, and is placed in the public
-// domain. The author hereby disclaims copyright to this source code.
+/*-----------------------------------------------------------------------------*/
+/* MurmurHash3 was written by Austin Appleby, and is placed in the public*/
+/* domain. The author hereby disclaims copyright to this source code.*/
 
-// Note - The x86 and x64 versions do _not_ produce the same results, as the
-// algorithms are optimized for their respective platforms. You can still
-// compile and run any of them on any platform, but your performance with the
-// non-native version will be less than optimal.
+/* Note - The x86 and x64 versions do _not_ produce the same results, as the*/
+/* algorithms are optimized for their respective platforms. You can still*/
+/* compile and run any of them on any platform, but your performance with the*/
+/* non-native version will be less than optimal.*/
 
 #include "murmur3.h"
 
-//-----------------------------------------------------------------------------
-// Platform-specific functions and macros
+/*-----------------------------------------------------------------------------*/
+/* Platform-specific functions and macros*/
+
+#ifdef __STDC_VERSION__
+#if __STDC_VERSION__ >= 199901L
+
+#define BIG_CONSTANT(x) (x##LLU)
 
 #ifdef __GNUC__
 #define FORCE_INLINE __attribute__((always_inline)) inline
@@ -18,6 +23,15 @@
 #define FORCE_INLINE inline
 #endif
 
+#else
+#define FORCE_INLINE
+#define BIG_CONSTANT(x) (x##LU)
+#endif
+#else
+#define FORCE_INLINE
+#define BIG_CONSTANT(x) (x##LU)
+#endif
+
 static FORCE_INLINE uint32_t rotl32 ( uint32_t x, int8_t r )
 {
   return (x << r) | (x >> (32 - r));
@@ -31,16 +45,14 @@ static FORCE_INLINE uint64_t rotl64 ( uint64_t x, int8_t r )
 #define	ROTL32(x,y)	rotl32(x,y)
 #define ROTL64(x,y)	rotl64(x,y)
 
-#define BIG_CONSTANT(x) (x##LLU)
-
-//-----------------------------------------------------------------------------
-// Block read - if your platform needs to do endian-swapping or can only
-// handle aligned reads, do the conversion here
+/*-----------------------------------------------------------------------------*/
+/* Block read - if your platform needs to do endian-swapping or can only*/
+/* handle aligned reads, do the conversion here*/
 
 #define getblock(p, i) (p[i])
 
-//-----------------------------------------------------------------------------
-// Finalization mix - force all bits of a hash block to avalanche
+/*-----------------------------------------------------------------------------*/
+/* Finalization mix - force all bits of a hash block to avalanche*/
 
 static FORCE_INLINE uint32_t fmix32 ( uint32_t h )
 {
@@ -53,7 +65,7 @@ static FORCE_INLINE uint32_t fmix32 ( uint32_t h )
   return h;
 }
 
-//----------
+/*----------*/
 
 static FORCE_INLINE uint64_t fmix64 ( uint64_t k )
 {
@@ -66,7 +78,7 @@ static FORCE_INLINE uint64_t fmix64 ( uint64_t k )
   return k;
 }
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
 void MurmurHash3_x86_32 ( const void * key, int len,
                           uint32_t seed, void * out )
@@ -80,8 +92,8 @@ void MurmurHash3_x86_32 ( const void * key, int len,
   uint32_t c1 = 0xcc9e2d51;
   uint32_t c2 = 0x1b873593;
 
-  //----------
-  // body
+  /*----------*/
+  /* body*/
 
   const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);
 
@@ -98,8 +110,8 @@ void MurmurHash3_x86_32 ( const void * key, int len,
     h1 = h1*5+0xe6546b64;
   }
 
-  //----------
-  // tail
+  /*----------*/
+  /* tail*/
 
   const uint8_t * tail = (const uint8_t*)(data + nblocks*4);
 
@@ -113,8 +125,8 @@ void MurmurHash3_x86_32 ( const void * key, int len,
           k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;
   };
 
-  //----------
-  // finalization
+  /*----------*/
+  /* finalization*/
 
   h1 ^= len;
 
@@ -123,9 +135,9 @@ void MurmurHash3_x86_32 ( const void * key, int len,
   *(uint32_t*)out = h1;
 } 
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
-void MurmurHash3_x86_128 ( const void * key, const int len,
+void MurmurHash3_x86_128 ( const void * key, int len,
                            uint32_t seed, void * out )
 {
   const uint8_t * data = (const uint8_t*)key;
@@ -142,8 +154,8 @@ void MurmurHash3_x86_128 ( const void * key, const int len,
   uint32_t c3 = 0x38b34ae5; 
   uint32_t c4 = 0xa1e38b93;
 
-  //----------
-  // body
+  /*----------*/
+  /* body*/
 
   const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);
 
@@ -171,8 +183,8 @@ void MurmurHash3_x86_128 ( const void * key, const int len,
     h4 = ROTL32(h4,13); h4 += h1; h4 = h4*5+0x32ac3b17;
   }
 
-  //----------
-  // tail
+  /*----------*/
+  /* tail*/
 
   const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
 
@@ -207,8 +219,8 @@ void MurmurHash3_x86_128 ( const void * key, const int len,
            k1 *= c1; k1  = ROTL32(k1,15); k1 *= c2; h1 ^= k1;
   };
 
-  //----------
-  // finalization
+  /*----------*/
+  /* finalization*/
 
   h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
 
@@ -229,10 +241,10 @@ void MurmurHash3_x86_128 ( const void * key, const int len,
   ((uint32_t*)out)[3] = h4;
 }
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
-void MurmurHash3_x64_128 ( const void * key, const int len,
-                           const uint32_t seed, void * out )
+void MurmurHash3_x64_128 ( const void * key, int len,
+                           uint32_t seed, void * out )
 {
   const uint8_t * data = (const uint8_t*)key;
   const int nblocks = len / 16;
@@ -244,8 +256,8 @@ void MurmurHash3_x64_128 ( const void * key, const int len,
   uint64_t c1 = BIG_CONSTANT(0x87c37b91114253d5);
   uint64_t c2 = BIG_CONSTANT(0x4cf5ad432745937f);
 
-  //----------
-  // body
+  /*----------*/
+  /* body*/
 
   const uint64_t * blocks = (const uint64_t *)(data);
 
@@ -263,8 +275,8 @@ void MurmurHash3_x64_128 ( const void * key, const int len,
     h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;
   }
 
-  //----------
-  // tail
+  /*----------*/
+  /* tail*/
 
   const uint8_t * tail = (const uint8_t*)(data + nblocks*16);
 
@@ -293,8 +305,8 @@ void MurmurHash3_x64_128 ( const void * key, const int len,
            k1 *= c1; k1  = ROTL64(k1,31); k1 *= c2; h1 ^= k1;
   };
 
-  //----------
-  // finalization
+  /*----------*/
+  /* finalization*/
 
   h1 ^= len; h2 ^= len;
 
@@ -311,5 +323,5 @@ void MurmurHash3_x64_128 ( const void * key, const int len,
   ((uint64_t*)out)[1] = h2;
 }
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
diff --git a/murmur3.h b/murmur3.h
index e12bf08..c6089d1 100644
--- a/murmur3.h
+++ b/murmur3.h
@@ -1,7 +1,7 @@
-//-----------------------------------------------------------------------------
-// MurmurHash3 was written by Austin Appleby, and is placed in the
-// public domain. The author hereby disclaims copyright to this source
-// code.
+/*-----------------------------------------------------------------------------*/
+/* MurmurHash3 was written by Austin Appleby, and is placed in the*/
+/* public domain. The author hereby disclaims copyright to this source*/
+/* code.*/
 
 #ifndef _MURMURHASH3_H_
 #define _MURMURHASH3_H_
@@ -12,7 +12,7 @@
 extern "C" {
 #endif
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
 void MurmurHash3_x86_32 (const void *key, int len, uint32_t seed, void *out);
 
@@ -20,10 +20,10 @@ void MurmurHash3_x86_128(const void *key, int len, uint32_t seed, void *out);
 
 void MurmurHash3_x64_128(const void *key, int len, uint32_t seed, void *out);
 
-//-----------------------------------------------------------------------------
+/*-----------------------------------------------------------------------------*/
 
 #ifdef __cplusplus
 }
 #endif
 
-#endif // _MURMURHASH3_H_
+#endif /* _MURMURHASH3_H_*/
